```json
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# FAQ Generator Notebook\n",
    "This notebook generates 20 accurate, topic-specific FAQs using the Phi-3-mini model. Features:\n",
    "- Interactive UI with ipywidgets.\n",
    "- Generates answers (optional).\n",
    "- Exports to CSV.\n",
    "- Debug mode for troubleshooting.\n",
    "## Setup\n",
    "Run this cell to install dependencies (if not already installed in your virtual environment)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "!pip install ipywidgets jupyter transformers torch pandas bitsandbytes accelerate"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Imports and Model Loading\n",
    "Loads the Phi-3-mini model for high accuracy and low memory usage."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import ipywidgets as widgets\n",
    "from IPython.display import display, clear_output\n",
    "from transformers import pipeline\n",
    "import re\n",
    "import pandas as pd\n",
    "import io\n",
    "import torch\n",
    "\n",
    "# Cache model loading\n",
    "def load_model():\n",
    "    try:\n",
    "        generator = pipeline(\n",
    "            'text-generation',\n",
    "            model='microsoft/Phi-3-mini-4k-instruct',\n",
    "            torch_dtype=torch.bfloat16 if torch.cuda.is_available() else torch.float32,\n",
    "            device=-1,\n",
    "            trust_remote_code=True\n",
    "        )\n",
    "        return generator\n",
    "    except Exception as e:\n",
    "        print(f'Error loading model: {str(e)}')\n",
    "        return None\n",
    "\n",
    "generator = load_model()\n",
    "if generator is None:\n",
    "    raise Exception('Model failed to load. Check dependencies or internet.')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Interactive FAQ Generator\n",
    "Enter a topic, adjust settings, and click Generate. Outputs 20 FAQs, optional answers, and a CSV download."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Widgets for UI\n",
    "topic_input = widgets.Text(\n",
    "    value='',\n",
    "    placeholder='e.g., Electric cars',\n",
    "    description='Topic:',\n",
    "    layout={'width': '600px'}\n",
    ")\n",
    "max_tokens_slider = widgets.IntSlider(\n",
    "    value=600,\n",
    "    min=300,\n",
    "    max=800,\n",
    "    step=50,\n",
    "    description='Max Tokens:',\n",
    "    style={'description_width': 'initial'}\n",
    ")\n",
    "answers_check = widgets.Checkbox(\n",
    "    value=False,\n",
    "    description='Generate Answers (slower)',\n",
    "    style={'description_width': 'initial'}\n",
    ")\n",
    "debug_check = widgets.Checkbox(\n",
    "    value=False,\n",
    "    description='Show Debug Output',\n",
    "    style={'description_width': 'initial'}\n",
    ")\n",
    "generate_button = widgets.Button(\n",
    "    description='Generate 20 FAQs',\n",
    "    button_style='primary',\n",
    "    tooltip='Click to generate',\n",
    "    layout={'width': '200px'}\n",
    ")\n",
    "output = widgets.Output()\n",
    "\n",
    "# Store results\n",
    "faqs = []\n",
    "answers = []\n",
    "\n",
    "# Generate function\n",
    "def on_generate_button_clicked(b):\n",
    "    with output:\n",
    "        clear_output()\n",
    "        if not topic_input.value.strip():\n",
    "            print('Please enter a topic!')\n",
    "            return\n",
    "        \n",
    "        print('Generating accurate FAQs...')\n",
    "        try:\n",
    "            global faqs, answers\n",
    "            faqs = []\n",
    "            answers = []\n",
    "            \n",
    "            # Prompt for 20 FAQs\n",
    "            prompt = f'<|user|>\\nGenerate exactly 20 highly relevant and accurate frequently asked questions about \"{topic_input.value}\". Make them concise, diverse, and specific to the topic. Output ONLY a numbered list from 1 to 20, each on a new line. No introductions or extras.<|end|>\\n<|assistant|>\\n'\n",
    "            \n",
    "            result = generator(\n",
    "                prompt,\n",
    "                max_new_tokens=max_tokens_slider.value,\n",
    "                do_sample=False,\n",
    "                temperature=0.1,\n",
    "                pad_token_id=generator.tokenizer.eos_token_id\n",
    "            )\n",
    "            \n",
    "            generated = result[0]['generated_text']\n",
    "            assistant_start = generated.find('<|assistant|>') + len('<|assistant|>\\n')\n",
    "            faqs_text = generated[assistant_start:].strip()\n",
    "            \n",
    "            # Parse\n",
    "            faqs_raw = faqs_text.split('\\n')\n",
    "            for line in faqs_raw:\n",
    "                line = line.strip()\n",
    "                if re.match(r'^\\d+\\.\\s*.+', line):\n",
    "                    faqs.append(line)\n",
    "                elif line and len(line) > 5:\n",
    "                    faqs.append(f'{len(faqs) + 1}. {line}')\n",
    "            \n",
    "            # Ensure 20\n",
    "            while len(faqs) < 20:\n",
    "                faqs.append(f'{len(faqs) + 1}. Additional FAQ on {topic_input.value} (expand topic for more).')\n",
    "            faqs = faqs[:20]\n",
    "            \n",
    "            # Answers\n",
    "            if answers_check.value:\n",
    "                print('Generating answers...')\n",
    "                for faq in faqs:\n",
    "                    ans_prompt = f'<|user|>\\nProvide a short, accurate answer to: {faq}<|end|>\\n<|assistant|>\\n'\n",
    "                    ans_result = generator(ans_prompt, max_new_tokens=100, do_sample=True, temperature=0.3)\n",
    "                    ans_text = ans_result[0]['generated_text'].split('<|assistant|>')[-1].strip()\n",
    "                    answers.append(ans_text)\n",
    "            \n",
    "            # Debug\n",
    "            if debug_check.value:\n",
    "                print('--- Debug: Generated Text ---')\n",
    "                print(generated)\n",
    "                print('--- Debug: Parsed FAQs ---')\n",
    "                print(faqs)\n",
    "            \n",
    "            # Display FAQs\n",
    "            print(f'\\nTop 20 Accurate FAQs for \"{topic_input.value}\":')\n",
    "            for i, faq in enumerate(faqs, 1):\n",
    "                print(f'Q{i}: {faq}')\n",
    "                if answers_check.value and i-1 < len(answers):\n",
    "                    print(f'Answer: {answers[i-1]}')\n",
    "                print('---')\n",
    "            \n",
    "            # CSV export\n",
    "            print('\\nExporting to CSV...')\n",
    "            df = pd.DataFrame({'Question Number': list(range(1, 21)), 'Question': faqs})\n",
    "            if answers_check.value and answers:\n",
    "                df['Answer'] = answers[:20]\n",
    "            csv_buffer = io.StringIO()\n",
    "            df.to_csv(csv_buffer, index=False)\n",
    "            with open(f'phi_faqs_{topic_input.value.replace(\" \", \"_\")}.csv', 'w') as f:\n",
    "                f.write(csv_buffer.getvalue())\n",
    "            print(f'Saved to phi_faqs_{topic_input.value.replace(\" \", \"_\")}.csv')\n",
    "            \n",
    "            print(f'Generated {len(faqs)} FAQs successfully!')\n",
    "        except Exception as e:\n",
    "            print(f'Error: {str(e)}')\n",
    "\n",
    "# Connect button\n",
    "generate_button.on_click(on_generate_button_clicked)\n",
    "\n",
    "# Display UI\n",
    "display(widgets.VBox([\n",
    "    widgets.HTML('<h1 style=\"color: #1f77b4;\">‚ùì Smart FAQ Generator</h1>'),\n",
    "    widgets.HTML('<p style=\"color: #ff7f0e;\">Enter a topic to generate 20 accurate FAQs!</p>'),\n",
    "    topic_input,\n",
    "    max_tokens_slider,\n",
    "    answers_check,\n",
    "    debug_check,\n",
    "    generate_button,\n",
    "    output\n",
    "]))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
```